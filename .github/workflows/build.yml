name: build artifacts
on: [push]

jobs:
  build-linux-artifact:
    name: build-linux-artifact
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: Jimver/cuda-toolkit@v0.2.4
        id: cuda-toolkit
        with:
          cuda: '11.4.0'
          sub-packages: '["nvcc"]'
          method: 'network'

      - name: Install dependencies
        run: sudo apt-get install -y libuv1-dev

      - name: Build miner
        run: make linux-gpu

      - name: Rename miner
        run: mv bin/gpu-miner bin/gpu-miner_$(git rev-parse --short "$GITHUB_SHA")

      - uses: actions/upload-artifact@v2
        with:
          name: linux-binary
          path: bin/gpu-miner_*

  build-windows-artifact:
    name: build-windows-artifact
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - uses: Jimver/cuda-toolkit@v0.2.4
        id: cuda-toolkit
        with:
          cuda: '11.4.0'
          sub-packages: '["nvcc", "cudart"]'
          method: 'network'

      - uses: actions/cache@v2
        id: cache_libuv
        with:
          path: libuv/build
          key: ${{ runner.os }}-${{ hashFiles('libuv/CMakeLists.txt') }} # Hash based on cmake defs

      - name: Build Libuv
        if: steps.cache_libuv.outputs.cache-hit != 'true'
        run: |
             mkdir libuv/build
             cd libuv/build
             cmake .. -DBUILD_TESTING=OFF
             cmake --build . --config Release
             cd $GITHUB_WORKSPACE

      - name: Build Miner
        run: |
             nvcc --std c++11 -O3 --ptxas-options -v --x cu src/main.cu -Ilibuv/include -Llibuv/build/Release -lmsvcrt -luser32 -liphlpapi -luserenv -lws2_32 -luv_a -o bin/gpu-miner

      - name: Rename Miner
        run: |
             $fileName = git rev-parse --short HEAD
             cp bin/gpu-miner.exe "bin/gpu-miner_$fileName.exe"

      - uses: actions/upload-artifact@v2
        with:
          name: windows-binary
          path: bin/gpu-miner_*.exe
  
  release:
    name: release
    runs-on: ubuntu-latest
    # If both artifacts were built properly and this is a tag
    if: ${{ needs.build-linux-artifact.result == 'success' && needs.build-linux-artifact.result == 'success' && startsWith(github.ref, 'refs/tags/') }}
    needs: [build-linux-artifact, build-windows-artifact]
    steps:
      - uses: actions/checkout@v2
      
      - name: Get linux artifact
        uses: actions/download-artifact@v2
        with:
          name: linux-binary
              
      - name: Get Windows artifact
        uses: actions/download-artifact@v2
        with:
          name: windows-binary

      - name: Get the version (Release prep)
        id: get_version
        run: |
          version=$(echo ${GITHUB_REF/refs\/tags\//} | cut -c 2-)
          echo ::set-output name=VERSION::$version
        shell: bash

      - name: Generate miners checksums (Release prep)
        run: |
             filename=$(git rev-parse --short HEAD)
             mv "gpu-miner_$filename" "alephium-${{ steps.get_version.outputs.VERSION }}-cuda-miner-linux"
             mv "gpu-miner_$filename.exe" "alephium-${{ steps.get_version.outputs.VERSION }}-cuda-miner-windows.exe"
             sha256sum "alephium-${{ steps.get_version.outputs.VERSION }}-cuda-miner-linux" > "alephium-${{ steps.get_version.outputs.VERSION }}-cuda-miner-linux.checksum"
             sha256sum "alephium-${{ steps.get_version.outputs.VERSION }}-cuda-miner-windows.exe" > "alephium-${{ steps.get_version.outputs.VERSION }}-cuda-miner-windows.exe.checksum"
             ls -la
             
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            alephium-${{ steps.get_version.outputs.VERSION }}-cuda-miner-linux
            alephium-${{ steps.get_version.outputs.VERSION }}-cuda-miner-linux.checksum
            alephium-${{ steps.get_version.outputs.VERSION }}-cuda-miner-windows.exe
            alephium-${{ steps.get_version.outputs.VERSION }}-cuda-miner-windows.exe.checksum
            
  buildx_and_push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    if: ${{ needs.release.result == 'success' }}
    needs: release
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1

      - name: Get the version
        id: get_version
        run: |
          version=$(git describe --tags --abbrev=0)
          echo $version
          echo ${version:1}
          echo ::set-output name=VERSION::$version
          echo ::set-output name=VERSION-NO-V::${version:1}
        shell: bash

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and publish docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          build-args: RELEASE=${{ steps.get_version.outputs.VERSION-NO-V }}
          platforms: linux/amd64
          tags: |
            docker.io/capito27/gpu-miner:${{ steps.get_version.outputs.VERSION }}
            docker.io/capito27/gpu-miner:latest
          push: true
